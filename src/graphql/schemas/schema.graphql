type Designer {
  id: ID!
  name: String!
  currentRole: String
  isActive: Boolean!
  status: DesignerStatus!
  biography: String
  imageUrl: String
  nationality: String
  birthYear: Int
  deathYear: Int
  awards: [String!]
  education: [String!]
  signatureStyles: [String!]
  socialMedia: JSON
  tenures: [Tenure!]
  relationships: [Relationship!]
}

type Brand {
  id: ID!
  name: String!
  description: String
  foundedYear: Int
  headquarters: String
  parentCompany: String
  category: String!
  website: String
  socialMedia: JSON
  logoUrl: String
  designers: [Designer!]
  tenures: [Tenure!]
}

type Tenure {
  id: ID!
  designer: Designer!
  brand: Brand!
  role: String
  department: Department
  startYear: Int!
  endYear: Int
  isCurrentRole: Boolean!
  achievements: [String!]
  notableWorks: [String!]
  notableCollections: [String!]
  impactDescription: String
}

type Relationship {
  id: ID!
  sourceDesigner: Designer!
  targetDesigner: Designer!
  brand: Brand!
  type: RelationshipType!
  startYear: Int
  endYear: Int
  description: String
  impact: String
  collaborationProjects: [String!]
}

enum DesignerStatus {
  ACTIVE
  RETIRED
  DECEASED
}

enum RelationshipType {
  mentorship
  succession
  collaboration
  familial
}

enum Department {
  jewelry
  watches
  readyToWear
  accessories
  leatherGoods
  menswear
  womenswear
  hauteCouture
  allDepartments
}

scalar JSON

type Query {
  designer(id: ID!): Designer
  designers(
    status: DesignerStatus
    isActive: Boolean
    limit: Int
    offset: Int
  ): [Designer!]!
  
  brand(id: ID!): Brand
  brands(
    category: String
    limit: Int
    offset: Int
  ): [Brand!]!
  
  tenure(id: ID!): Tenure
  tenures(
    designerId: ID
    brandId: ID
    department: Department
    limit: Int
    offset: Int
  ): [Tenure!]!
  
  relationship(id: ID!): Relationship
  relationships(
    sourceDesignerId: ID
    targetDesignerId: ID
    brandId: ID
    type: RelationshipType
    limit: Int
    offset: Int
  ): [Relationship!]!
}
